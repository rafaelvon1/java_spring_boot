name: ü§ñ Gemini Full Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install google-generativeai PyGithub requests

      - name: Run Gemini 1.5 Flash Code Review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          python3 <<'EOF'
          import os
          import sys
          import json
          import requests
          from github import Github, GithubException

          # -----------------------------
          # Verifica vari√°veis de ambiente
          # -----------------------------
          GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
          GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
          REPO_NAME = os.getenv("GITHUB_REPOSITORY")
          REF = os.getenv("GITHUB_REF")

          if not GEMINI_API_KEY:
              print("‚ùå GEMINI_API_KEY n√£o configurado!")
              sys.exit(1)
          if not GITHUB_TOKEN:
              print("‚ùå GITHUB_TOKEN n√£o configurado!")
              sys.exit(1)
          if not REPO_NAME or not REF:
              print("‚ùå Vari√°veis de ambiente GITHUB_REPOSITORY ou GITHUB_REF ausentes")
              sys.exit(1)

          # -----------------------------
          # Inicializa GitHub
          # -----------------------------
          try:
              g = Github(GITHUB_TOKEN)
              repo = g.get_repo(REPO_NAME)
              pr_number = int(REF.split("/")[2])
              pr = repo.get_pull(pr_number)
          except Exception as e:
              print("‚ùå Erro ao acessar PR:", e)
              sys.exit(1)

          print(f"üîç Analisando PR #{pr_number} de {REPO_NAME}")

          # -----------------------------
          # Monta diff
          # -----------------------------
          diffs = ""
          try:
              files = pr.get_files()
              for f in files:
                  if f.patch:
                      diffs += f"### {f.filename}\n```diff\n{f.patch}\n```\n\n"
          except GithubException as e:
              print("‚ùå Erro ao obter arquivos do PR:", e)
              sys.exit(1)

          if not diffs.strip():
              print("‚ö†Ô∏è Nenhum diff encontrado para an√°lise.")
              pr.create_issue_comment("‚ö†Ô∏è Nenhum diff encontrado para an√°lise pelo Gemini.")
              sys.exit(0)

          # Limita tamanho do diff para 50.000 caracteres (cerca de 1M tokens √© muito)
          if len(diffs) > 50000:
              diffs = diffs[:50000] + "\n\n[Diff truncado para an√°lise parcial]"

          # -----------------------------
          # Monta prompt
          # -----------------------------
          prompt = f"""
          Fa√ßa uma an√°lise t√©cnica e detalhada deste Pull Request.
          Identifique:
          - Problemas de seguran√ßa, performance e l√≥gica
          - Boas pr√°ticas de c√≥digo e legibilidade
          - Pontos de documenta√ß√£o e manuten√ß√£o
          - Sugest√µes de melhoria

          Analise os trechos abaixo:

          {diffs}
          """

          # -----------------------------
          # Chamada √† API Gemini
          # -----------------------------
          url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"
          headers = {
              "Authorization": f"Bearer {GEMINI_API_KEY}",
              "Content-Type": "application/json"
          }
          body = {"contents":[{"role":"user","parts":[{"text": prompt}]}]}

          try:
              response = requests.post(url, headers=headers, data=json.dumps(body), timeout=60)
          except requests.exceptions.RequestException as e:
              print("‚ùå Erro na requisi√ß√£o √† Gemini:", e)
              pr.create_issue_comment(f"‚ùå Erro na requisi√ß√£o √† Gemini: {e}")
              sys.exit(1)

          if response.status_code != 200:
              print(f"‚ùå Status Code {response.status_code}: {response.text}")
              pr.create_issue_comment(f"‚ùå Erro na Gemini ({response.status_code}): {response.text}")
              sys.exit(1)

          try:
              resp_json = response.json()
              review_text = resp_json.get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text", "")
          except json.JSONDecodeError as e:
              print("‚ùå Falha ao parsear JSON da Gemini:", e)
              pr.create_issue_comment(f"‚ùå Falha ao parsear JSON da Gemini: {e}")
              sys.exit(1)

          if not review_text:
              review_text = "‚ö†Ô∏è Nenhum feedback gerado pela Gemini."

          # -----------------------------
          # Comenta no PR
          # -----------------------------
          try:
              pr.create_issue_comment(f"### ü§ñ Review autom√°tico Gemini\n\n{review_text}")
          except GithubException as e:
              print("‚ùå Falha ao postar coment√°rio no PR:", e)
              sys.exit(1)

          print("‚úÖ Review postado com sucesso!")
          EOF
