name: PR Analysis with Gemini (Limited Diff)

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  analyze_pr_diff:
    runs-on: ubuntu-latest

    env:
      GCP_TOKEN: ${{ secrets.GCP_TOKEN }}  # Service Account JSON ou token
      MAX_DIFF_LINES: 200  # Limite de linhas de diff por arquivo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Clear previous bot comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            for (const comment of comments) {
              if (comment.user.login === 'services-infradata') {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
              }
            }

      - name: Analyze PR with Gemini
        shell: bash
        run: |
          echo "🔍 Analisando PR #${{ github.event.pull_request.number }}"

          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA")

          if [ -z "$CHANGED_FILES" ]; then
            echo "⚠️ Nenhum arquivo modificado."
            exit 0
          fi

          touch gemini_responses.md

          for FILE in $CHANGED_FILES; do
            echo "--- Processando: $FILE ---"

            FILE_DIFF=$(git diff --unified=0 --color=never "$BASE_SHA" "$HEAD_SHA" -- "$FILE")
            # Limitar linhas do diff
            FILE_DIFF=$(echo "$FILE_DIFF" | head -n $MAX_DIFF_LINES)

            if [ -z "$FILE_DIFF" ]; then
              echo "⚠️ Diff vazio ou truncado"
              echo "✅ File OK" >> gemini_responses.md
              continue
            fi

            FULL_PROMPT="You are an expert code reviewer. Analyze this diff focusing on security, best practices, and potential issues. Limit your answer to concise points. Diff:\n$FILE_DIFF"

            # Chamada Gemini
            RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5" \
              -H "Authorization: Bearer $GCP_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg prompt "$FULL_PROMPT" '{prompt: $prompt, maxOutputTokens: 500}')")

            MODEL_OUTPUT=$(echo "$RESPONSE" | jq -r '.candidates[0].content // "⚠️ Nenhuma resposta retornada."')

            echo "## 🧠 Análise de $FILE" >> gemini_responses.md
            echo "$MODEL_OUTPUT" >> gemini_responses.md
            echo "" >> gemini_responses.md
          done

      - name: Post AI analysis comments to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = context.payload.pull_request.number;
            const analysis = fs.readFileSync('gemini_responses.md', 'utf-8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `### 🤖 Gemini AI Code Analysis\n\n${analysis}`
            })
