name: ðŸ¤– Gemini Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Instalar dependÃªncias Python
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install google-generativeai pygithub

      - name: Rodar anÃ¡lise com Gemini 1.5 Flash
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'EOF'
          import os, google.generativeai as genai
          from github import Github

          # ConfiguraÃ§Ãµes da API
          genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
          model = genai.GenerativeModel("gemini-1.5-flash")

          # Dados do PR
          g = Github(os.getenv("GITHUB_TOKEN"))
          repo = g.get_repo(os.getenv("GITHUB_REPOSITORY"))
          pr_number = int(os.getenv("GITHUB_REF").split('/')[-1])
          pr = repo.get_pull(pr_number)
          files = pr.get_files()

          # Monta o contexto com diffs
          diffs = ""
          for f in files:
              if f.patch:
                  diffs += f"### {f.filename}\n```diff\n{f.patch}\n```\n\n"

          prompt = f"""
          FaÃ§a uma anÃ¡lise detalhada de cÃ³digo (code review) para o PR abaixo.
          Liste problemas, melhorias e sugestÃµes de boas prÃ¡ticas.
          Use linguagem tÃ©cnica e objetiva, em portuguÃªs.

          {diffs}
          """

          # Chamada ao Gemini
          response = model.generate_content(prompt)
          review_text = response.text

          # Comenta no PR
          pr.create_issue_comment(f"### ðŸ¤– Review automÃ¡tico Gemini\n\n{review_text}")
          EOF
